class Solution {
public:
int t[1001][1001];
int mod = 1e9 + 7;
int k;
    int numWays(vector<string>& words, string target) {
        int m = target.size();
        k = words[0].size();

        vector<vector<long long>>freq(26, vector<long long>(k));
        for(int i=0; i<k; i++){
            for(auto &word:words){
                char ch = word[i];
                freq[ch-'a'][i]++;
            }
        }
        memset(t, -1, sizeof(t));
        return solve(0, 0, freq, target);
    }

    private:
int solve(int i, int j, vector<vector<long long>>& freq, string &target) {
    if (i == target.size()) return 1; 
    if (j == k) return 0; 

    if (t[i][j] != -1) {
        return t[i][j];
    }

    int not_taken = solve(i, j + 1, freq, target) % mod;

    int taken = (freq[target[i] - 'a'][j] * solve(i + 1, j + 1, freq, target)) % mod;

    return t[i][j] = (not_taken + taken) % mod;
}

};
