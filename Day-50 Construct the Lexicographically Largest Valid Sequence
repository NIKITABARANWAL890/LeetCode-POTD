class Solution {
public:
bool getconstructDistancedSequence(int n, int i, vector<int>&ans, vector<bool>&used){
    if(i>=ans.size()) return true;
    if(ans[i]!=-1){
        return getconstructDistancedSequence(n, i+1, ans, used);
    }
    for(int num=n; num>=1; num--){
        if(used[num]==true) continue;
        // TRY
        used[num]=true;
        ans[i]=num;

        // EXPLORE
        if(num==1){
            if(getconstructDistancedSequence(n, i+1, ans, used)) return true;
        }else{
            int j = ans[i]+i;
            if(j<ans.size() && ans[j]==-1){
                ans[j]=num;
                if(getconstructDistancedSequence(n, i+1, ans, used)) return true;
                ans[j]=-1;
            }
        }
        
        // UNDO
        used[num]=false;
        ans[i]=-1;
    }
    return false;
}
    vector<int> constructDistancedSequence(int n) {
        vector<int>ans(2*n -1, -1);
        vector<bool>used(n+1, false);
        getconstructDistancedSequence(n, 0, ans, used);
        return ans;
    }
};
