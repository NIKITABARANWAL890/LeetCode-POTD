class Solution {
public:
    int minOperations(vector<vector<int>>& grid, int x) {
        vector<int> arr;
        int m = grid.size(), n = grid[0].size();
        
        // Flatten grid into a 1D array
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                arr.push_back(grid[i][j]);
            }
        }
        
        // Check if all elements have the same remainder when divided by x
        int rem = arr[0] % x;
        for (int num : arr) {
            if (num % x != rem) return -1;
        }
        
        // Sort array and find the median
        sort(arr.begin(), arr.end());
        int median = arr[arr.size() / 2];
        
        // Calculate minimum operations
        int count = 0;
        for (int num : arr) {
            count += abs(num - median) / x;
        }
        
        return count;
    }
};
